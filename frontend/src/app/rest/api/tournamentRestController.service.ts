/**
 * Tournament App API
 * Rest API using OpenAPI 3 for a tutorial Tournament application
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddParticipantRequestDTO } from '../model/addParticipantRequestDTO';
import { AddParticipantResponseDTO } from '../model/addParticipantResponseDTO';
import { CloseParticipationsRequestDTO } from '../model/closeParticipationsRequestDTO';
import { FillFinalPhaseMatchRequestDTO } from '../model/fillFinalPhaseMatchRequestDTO';
import { FillFinalPhaseMatchResponseDTO } from '../model/fillFinalPhaseMatchResponseDTO';
import { FillGroupPhaseMatchRequestDTO } from '../model/fillGroupPhaseMatchRequestDTO';
import { FillGroupPhaseMatchResponseDTO } from '../model/fillGroupPhaseMatchResponseDTO';
import { FinalPhaseMatchScoresDTO } from '../model/finalPhaseMatchScoresDTO';
import { GroupsPointsDTO } from '../model/groupsPointsDTO';
import { RemainingMatchesParticipantGroupPointsDTO } from '../model/remainingMatchesParticipantGroupPointsDTO';
import { StartFinalMatchesPhaseRequestDTO } from '../model/startFinalMatchesPhaseRequestDTO';
import { StartFinalMatchesPhaseResponseDTO } from '../model/startFinalMatchesPhaseResponseDTO';
import { StartGroupPhaseResponseDTO } from '../model/startGroupPhaseResponseDTO';
import { StartGroupsPhaseRequestDTO } from '../model/startGroupsPhaseRequestDTO';
import { TournamentCreateRequestDTO } from '../model/tournamentCreateRequestDTO';
import { TournamentCreateResponseDTO } from '../model/tournamentCreateResponseDTO';
import { TournamentDTO } from '../model/tournamentDTO';
import { TournamentsSearchRequestDTO } from '../model/tournamentsSearchRequestDTO';
import { TournamentsSearchResponseDTO } from '../model/tournamentsSearchResponseDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TournamentRestControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * close registrations for participating to Tournament
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public closeParticipations(body: CloseParticipationsRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public closeParticipations(body: CloseParticipationsRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public closeParticipations(body: CloseParticipationsRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public closeParticipations(body: CloseParticipationsRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling closeParticipations.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling closeParticipations.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/close-participations`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * create a new Tournament
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create1(body: TournamentCreateRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TournamentCreateResponseDTO>;
    public create1(body: TournamentCreateRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TournamentCreateResponseDTO>>;
    public create1(body: TournamentCreateRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TournamentCreateResponseDTO>>;
    public create1(body: TournamentCreateRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TournamentCreateResponseDTO>('post',`${this.basePath}/api/tournament`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * add a participant to a Tournament
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create2(body: AddParticipantRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<AddParticipantResponseDTO>;
    public create2(body: AddParticipantRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddParticipantResponseDTO>>;
    public create2(body: AddParticipantRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddParticipantResponseDTO>>;
    public create2(body: AddParticipantRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create2.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling create2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AddParticipantResponseDTO>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/participants`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Fill a final phase match score (only by the Referee of the match)
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillFinalPhaseMatchScore(body: FillFinalPhaseMatchRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<FillFinalPhaseMatchResponseDTO>;
    public fillFinalPhaseMatchScore(body: FillFinalPhaseMatchRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FillFinalPhaseMatchResponseDTO>>;
    public fillFinalPhaseMatchScore(body: FillFinalPhaseMatchRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FillFinalPhaseMatchResponseDTO>>;
    public fillFinalPhaseMatchScore(body: FillFinalPhaseMatchRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling fillFinalPhaseMatchScore.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling fillFinalPhaseMatchScore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FillFinalPhaseMatchResponseDTO>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/final-match-phase-scores`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Fill a group match score (only by the Referee of the match)
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillGroupPhaseMatchScore(body: FillGroupPhaseMatchRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<FillGroupPhaseMatchResponseDTO>;
    public fillGroupPhaseMatchScore(body: FillGroupPhaseMatchRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FillGroupPhaseMatchResponseDTO>>;
    public fillGroupPhaseMatchScore(body: FillGroupPhaseMatchRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FillGroupPhaseMatchResponseDTO>>;
    public fillGroupPhaseMatchScore(body: FillGroupPhaseMatchRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling fillGroupPhaseMatchScore.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling fillGroupPhaseMatchScore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FillGroupPhaseMatchResponseDTO>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/fill-group-match-score`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * get Tournament detail
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getById(tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<TournamentDTO>;
    public getById(tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TournamentDTO>>;
    public getById(tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TournamentDTO>>;
    public getById(tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling getById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<TournamentDTO>('get',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get final phase matches score
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFinalPhaseMatchScores(tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<FinalPhaseMatchScoresDTO>;
    public getFinalPhaseMatchScores(tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FinalPhaseMatchScoresDTO>>;
    public getFinalPhaseMatchScores(tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FinalPhaseMatchScoresDTO>>;
    public getFinalPhaseMatchScores(tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling getFinalPhaseMatchScores.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FinalPhaseMatchScoresDTO>('get',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/final-match-phase-scores`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * compute participant points per groups
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroupsPoints(tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<GroupsPointsDTO>;
    public getGroupsPoints(tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupsPointsDTO>>;
    public getGroupsPoints(tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupsPointsDTO>>;
    public getGroupsPoints(tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling getGroupsPoints.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GroupsPointsDTO>('get',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/group-points`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * compute participant points in group and remaining matches
     * @param tournamentId 
     * @param participantId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getParticipantGroupsPoints(tournamentId: string, participantId: string, observe?: 'body', reportProgress?: boolean): Observable<RemainingMatchesParticipantGroupPointsDTO>;
    public getParticipantGroupsPoints(tournamentId: string, participantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RemainingMatchesParticipantGroupPointsDTO>>;
    public getParticipantGroupsPoints(tournamentId: string, participantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RemainingMatchesParticipantGroupPointsDTO>>;
    public getParticipantGroupsPoints(tournamentId: string, participantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling getParticipantGroupsPoints.');
        }

        if (participantId === null || participantId === undefined) {
            throw new Error('Required parameter participantId was null or undefined when calling getParticipantGroupsPoints.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RemainingMatchesParticipantGroupPointsDTO>('get',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/group-points/${encodeURIComponent(String(participantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * List Tournaments
     * @param maxResults 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public list(maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<TournamentDTO>>;
    public list(maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TournamentDTO>>>;
    public list(maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TournamentDTO>>>;
    public list(maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<TournamentDTO>>('get',`${this.basePath}/api/tournament`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Search Tournaments
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTournaments(body: TournamentsSearchRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<TournamentsSearchResponseDTO>;
    public searchTournaments(body: TournamentsSearchRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TournamentsSearchResponseDTO>>;
    public searchTournaments(body: TournamentsSearchRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TournamentsSearchResponseDTO>>;
    public searchTournaments(body: TournamentsSearchRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling searchTournaments.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<TournamentsSearchResponseDTO>('post',`${this.basePath}/api/tournament/search`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * start final phase matches: peek first of each groups, random shuffle in grid, setup elimination matches
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startFinalMatchesPhase(body: StartFinalMatchesPhaseRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<StartFinalMatchesPhaseResponseDTO>;
    public startFinalMatchesPhase(body: StartFinalMatchesPhaseRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartFinalMatchesPhaseResponseDTO>>;
    public startFinalMatchesPhase(body: StartFinalMatchesPhaseRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartFinalMatchesPhaseResponseDTO>>;
    public startFinalMatchesPhase(body: StartFinalMatchesPhaseRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling startFinalMatchesPhase.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling startFinalMatchesPhase.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StartFinalMatchesPhaseResponseDTO>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/start-final-match-phase`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * generate the random groups of participants, start the Group phase matches
     * @param body 
     * @param tournamentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startGroupsPhase(body: StartGroupsPhaseRequestDTO, tournamentId: string, observe?: 'body', reportProgress?: boolean): Observable<StartGroupPhaseResponseDTO>;
    public startGroupsPhase(body: StartGroupsPhaseRequestDTO, tournamentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartGroupPhaseResponseDTO>>;
    public startGroupsPhase(body: StartGroupsPhaseRequestDTO, tournamentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartGroupPhaseResponseDTO>>;
    public startGroupsPhase(body: StartGroupsPhaseRequestDTO, tournamentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling startGroupsPhase.');
        }

        if (tournamentId === null || tournamentId === undefined) {
            throw new Error('Required parameter tournamentId was null or undefined when calling startGroupsPhase.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StartGroupPhaseResponseDTO>('post',`${this.basePath}/api/tournament/${encodeURIComponent(String(tournamentId))}/start-groups-phase`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
